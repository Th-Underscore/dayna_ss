"""
Data models for structured story information.
"""

from dataclasses import dataclass, field
from typing import Dict, List, Optional
from datetime import datetime

@dataclass
class Relationship:
    """Represents a relationship between characters."""
    target_name: str
    description: str
    relationship_type: str  # e.g., "family", "friend", "enemy"
    trust_level: int = 0  # 0-100
    details: List[str] = field(default_factory=list)

@dataclass
class Attribute:
    """Represents a character attribute."""
    name: str
    value: str
    description: str
    category: str  # e.g., "physical", "mental", "social"

@dataclass
class Character:
    """Represents a character in the story."""
    name: str
    description: List[str]
    attributes: Dict[str, Attribute] = field(default_factory=dict)
    relationships: Dict[str, Relationship] = field(default_factory=dict)
    positions: List[str] = field(default_factory=list)
    important_deeds: List[str] = field(default_factory=list)
    last_updated: datetime = field(default_factory=datetime.now)

    @classmethod
    def from_dict(cls, data: Dict) -> 'Character':
        """Create a Character instance from a dictionary."""
        if isinstance(data, list):
            # Parse from list format like in example JSON
            char = cls(name="", description=[])
            char.description = []
            current_section = "description"
            
            for line in data:
                if line.endswith(":"):
                    current_section = line[:-1].lower()
                    continue
                    
                if line.startswith("- "):
                    line = line[2:]
                    
                if current_section == "attributes":
                    if ":" in line:
                        name, desc = line.split(":", 1)
                        char.attributes[name.strip()] = Attribute(
                            name=name.strip(),
                            value="",
                            description=desc.strip(),
                            category="general"
                        )
                elif current_section == "relations":
                    if ":" in line:
                        name, desc = line.split(":", 1)
                        char.relationships[name.strip()] = Relationship(
                            target_name=name.strip(),
                            description=desc.strip(),
                            relationship_type="general"
                        )
                elif current_section == "position":
                    char.positions.append(line)
                elif current_section == "important deeds":
                    char.important_deeds.append(line)
                else:
                    char.description.append(line)
                    
            return char
        return cls(**data)

@dataclass
class Event:
    """Represents a significant event in the story."""
    name: str
    description: List[str]
    date: Optional[str] = None
    participants: List[str] = field(default_factory=list)
    consequences: List[str] = field(default_factory=list)
    related_events: List[str] = field(default_factory=list)

    @classmethod
    def from_dict(cls, data: Dict) -> 'Event':
        """Create an Event instance from a dictionary."""
        if isinstance(data, list):
            # Parse from list format like in example JSON
            event = cls(name="", description=[])
            
            for line in data:
                if line.startswith("- "):
                    event.consequences.append(line[2:])
                else:
                    event.description.append(line)
            
            # Try to extract date if present
            for desc in event.description:
                if "took place" in desc.lower():
                    parts = desc.split("took place")
                    if len(parts) > 1:
                        date_part = parts[1].split(".")[0].strip()
                        event.date = date_part
                        
            return event
        return cls(**data)

@dataclass
class Section:
    """Represents a section in the story summary."""
    name: str
    content: List[str]
    relevance_score: float = 0.0
    metadata: Dict = field(default_factory=dict)

    def to_prompt_format(self) -> str:
        """Convert section to prompt format."""
        if not self.content:
            return ""
            
        output = f"<%%% {self.name} %%%>\n"
        output += "\n".join(self.content)
        output += "\n"
        return output
