"""
Core RAG implementation for structured story information.
"""

import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import chromadb
from chromadb.utils import embedding_functions
from .models import Character, Event, Section, Relationship

class StoryRAG:
    """Manages structured RAG for story summarization."""
    
    def __init__(self,
                 collection_prefix: str = "story",
                 persist_directory: Optional[str] = None):
        """Initialize StoryRAG.
        
        Args:
            collection_prefix: Prefix for ChromaDB collections
            persist_directory: Directory to persist vectors (None for in-memory)
        """
        # Initialize ChromaDB
        self.client = chromadb.Client(
            chromadb.Settings(
                persist_directory=persist_directory,
                is_persistent=persist_directory is not None
            )
        )
        
        # Use sentence-transformers for embeddings
        self.embedding_function = embedding_functions.SentenceTransformerEmbeddingFunction(
            model_name="all-mpnet-base-v2"
        )
        
        # Initialize collections
        self.collections = {
            "characters": self.client.get_or_create_collection(
                name=f"{collection_prefix}_characters",
                embedding_function=self.embedding_function
            ),
            "events": self.client.get_or_create_collection(
                name=f"{collection_prefix}_events",
                embedding_function=self.embedding_function
            ),
            "narrative": self.client.get_or_create_collection(
                name=f"{collection_prefix}_narrative",
                embedding_function=self.embedding_function
            )
        }
        
        # Cache for loaded data
        self.characters: Dict[str, Character] = {}
        self.events: Dict[str, Event] = {}
        
    def load_from_json(self, json_path: str):
        """Load story data from JSON file."""
        with open(json_path, 'r') as f:
            data = json.load(f)
            
        # Load characters
        if 'current' in data and 'characters' in data['current']:
            for category in data['current']['characters']:
                for name, char_data in data['current']['characters'][category].items():
                    character = Character.from_dict(char_data)
                    character.name = name
                    self.add_character(character)
                    
        # Load events
        if 'events' in data:
            for name, event_data in data['events'].items():
                event = Event.from_dict(event_data)
                event.name = name
                self.add_event(event)
                
    def add_character(self, character: Character):
        """Add or update a character."""
        # Prepare document for vector store
        doc = f"{character.name}\n"
        doc += "\n".join(character.description)
        
        # Convert positions list to string to meet ChromaDB metadata requirements
        metadata = {
            "type": "character",
            "name": character.name,
            "positions": ", ".join(character.positions) if character.positions else ""
        }
        
        # Add to vector store
        self.collections["characters"].upsert(
            documents=[doc],
            ids=[character.name],
            metadatas=[metadata]
        )
        
        # Update cache
        self.characters[character.name] = character
        
    def add_event(self, event: Event):
        """Add or update an event."""
        # Prepare document for vector store
        doc = f"{event.name}\n"
        doc += "\n".join(event.description)
        
        # Prepare metadata with proper types
        metadata = {
            "type": "event",
            "name": event.name,
            "date": event.date if event.date else "",
            "participants": ", ".join(event.participants) if event.participants else ""
        }
        
        # Add to vector store
        self.collections["events"].upsert(
            documents=[doc],
            ids=[event.name],
            metadatas=[metadata]
        )
        
        # Update cache
        self.events[event.name] = event
        
    def get_character_summary(self, name: str, query: str) -> List[Section]:
        """Get character summary sections based on query."""
        if name not in self.characters:
            return []
            
        character = self.characters[name]
        sections = []
        
        # Description section
        sections.append(Section(
            name="Description",
            content=character.description
        ))
        
        # Attributes section (if character has attributes)
        if character.attributes:
            sections.append(Section(
                name="Attributes",
                content=[
                    f"{attr.name}: {attr.description}"
                    for attr in character.attributes.values()
                ]
            ))
            
        # Relationships section
        if character.relationships:
            sections.append(Section(
                name="Relationships",
                content=[
                    f"{rel.target_name}: {rel.description}"
                    for rel in character.relationships.values()
                ]
            ))
            
        # Status/Positions section
        if character.positions:
            sections.append(Section(
                name="Status",
                content=character.positions
            ))
            
        # Important deeds section
        if character.important_deeds:
            sections.append(Section(
                name="Milestones",
                content=character.important_deeds
            ))
            
        # Get relevant events
        relevant_events = self.search_events(query, limit=3)
        if relevant_events:
            sections.append(Section(
                name="Relevant Details",
                content=[
                    f"{event.name}: {desc}"
                    for event, desc in relevant_events
                ]
            ))
            
        return sections
        
    def search_events(self, query: str, limit: int = 3) -> List[Tuple[Event, str]]:
        """Search for relevant events."""
        results = self.collections["events"].query(
            query_texts=[query],
            n_results=limit
        )
        
        events = []
        if results and results['ids']:
            for event_id, doc in zip(results['ids'][0], results['documents'][0]):
                if event_id in self.events:
                    events.append((self.events[event_id], doc))
                    
        return events
        
    def generate_prompt(self, character_name: str, query: str) -> str:
        """Generate a complete prompt with all relevant sections."""
        sections = self.get_character_summary(character_name, query)
        return "\n".join(
            section.to_prompt_format()
            for section in sections
            if section.content  # Only include non-empty sections
        )
